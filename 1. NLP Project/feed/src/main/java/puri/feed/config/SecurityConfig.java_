package puri.feed.config;

import puri.feed.config.auth.PrincipalDetail;
import puri.feed.config.auth.PrincipalDetailService;
import lombok.RequiredArgsConstructor;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final PrincipalDetailService principalDetailService;

    @Bean
    public WebSecurityCustomizer configure() {
        return (web) -> web.ignoring().antMatchers(
                "/v3/api-docs/**",
                "/swagger-ui/**"
        );
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
            throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public BCryptPasswordEncoder encodePWD() {
        return new BCryptPasswordEncoder(); //  이 객체 Bean 으로 됨
    }

    // 시큐리티가 password 를 가로챌 때
    // 해당 password 가 어떤 해시로 암호화 된지 알아낸 후
    // 해당 해시로 암호화해 DB에 있는 해시랑 비교
//    @Override
//     protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//         auth.userDetailsService(principalDetailService).passwordEncoder(encodePWD());
//     }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/", "/auth/**", "/js/**", "/css/**", "/image/**", "/dummy/**").permitAll()
            .anyRequest().authenticated() 
            .and()
            .formLogin()
            .loginPage("/user/loginForm")
            .loginProcessingUrl("/api/user/login")// ÇØ´ç ¿äÃ» ·Î±×ÀÎ °¡·ÎÃ¨ -> ´ë½Å ·Î±×ÀÎ
            .defaultSuccessUrl("/")
            .and()
            .logout()
            .logoutRequestMatcher(new AntPathRequestMatcher("/user/logout"))
            .logoutSuccessUrl("/")
            .invalidateHttpSession(true);

        return http.build();
    }
}
//     @Override
//     protected void configure(HttpSecurity http) throws Exception {
//         http.csrf().disable(); // csrf Åä±Ù ºñÈ°¼ºÈ­ (Å×½ºÆ® ½Ã È°¼ºÈ­)
            
//         http.authorizeRequests().antMatchers("/", "/auth/**", "/js/**", "/css/**", "/image/**", "/dummy/**").permitAll()
//             .anyRequest().authenticated();

     
//         http.formLogin()
//             .loginPage("/user/loginForm")
//             .loginProcessingUrl("/api/user/login")// ÇØ´ç ¿äÃ» ·Î±×ÀÎ °¡·ÎÃ¨ -> ´ë½Å ·Î±×ÀÎ
//             .defaultSuccessUrl("/");

//         http.logout()
//             .logoutRequestMatcher(new AntPathRequestMatcher("/user/logout"))
//             .logoutSuccessUrl("/")
//             .invalidateHttpSession(true);
//     }
// }